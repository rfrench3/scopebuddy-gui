#!/usr/bin/env python3

import sys
sys.path.insert(0, "/app/share/scopebuddygui") # flatpak path

#PySide6, Qt Designer UI files
from PySide6.QtWidgets import QApplication, QMainWindow, QDialog
from PySide6.QtGui import QIntValidator
from ui_mainwindow import Ui_MainWindow  # Import generated UI file
from ui_about import Ui_Dialog_About  # Import generated UI file
from ui_apply_confirmation import Ui_Dialog_Apply
from ui_apply_error import Ui_Dialog_ApplyError
  
import os
from scbgui_functions import * # import the functions from scbgui_functions.py



scbpath = os.path.expanduser('~/.config/scopebuddy/scb.conf') #TODO: should this use xdg_config_path? (yes)



def create_config_path(scbpath) -> bool: #create .config/scopebuddy, return True if successful
    if os.path.exists(scbpath):
        return True
    print('config file does not exist, checking for Gamescope and Scopebuddy...')
    if not verify_dependencies_present(['gamescope', 'scopebuddy']):
        print('Gamescope or ScopeBuddy not found, unable to create config file.')
        return False
    print("dependencies present, generating default file...")
    
    try: #generates new config file with default values
        os.makedirs(os.path.dirname(scbpath), exist_ok=True)
        with open(scbpath,'w') as file:
            # Create scopebuddy's default file (TODO: must be manually updated if ScopeBuddy changes)
            file.write("# This is the config file that let's you assign defaults for gamescope when using the scopebuddy script\n")
            file.write("# lines starting with # are ignored\n")
            file.write("# Conf files matching the games Steam AppID stored in ~/.conf/scopebuddy/AppID/ will be sourced after\n")
            file.write("# ~/.config/scopebuddy/scb.conf or whichever file you specify with SCB_CONF=someotherfile.conf env var in the launch options.\n")
            file.write("# \n")
            file.write("# Example for always exporting specific environment variables for gamescope\n")
            file.write("#export XKB_DEFAULT_LAYOUT=no\n")
            file.write("#export MANGOHUD_CONFIG=preset=2\n")
            file.write("#\n")
            file.write("# Example for providing default gamescope arguments through scopebuddy if no arguments are given to the scopebuddy script, this does not need to be exported.\n")
            file.write("# To not use this default set of arguments, just launch scb with SCB_NOSCOPE=1 or just add any gamescope argument before the '-- %command%' then this variable will be ignored\n")
            file.write("#SCB_GAMESCOPE_ARGS=\"--mangoapp -f -w 2560 -h 1440 -W 2560 -H 1440 -r 180 --force-grab-cursor --hdr-enabled -e\"\n")
            file.write("#\n")
            file.write("# To auto-detect KDE display width, height, refresh, VRR and HDR states, you can use SCB_AUTO_* {RES|HDR|VRR}\n")
            file.write("# These vars will override any previously set values for -W and -H or append --hdr-enabled and --adaptive-sync\n")
            file.write("# automatically depending on the current settings for your active display, or the display chosen with -O /\n")
            file.write("# --prefer-output flags in gamescsope.\n")
            file.write("#SCB_AUTO_RES=1\n")
            file.write("#SCB_AUTO_HDR=1\n")
            file.write("#SCB_AUTO_VRR=1\n")
            file.write("# To debug scopebuddy output, uncomment the following line. After launching games, the executed cmd will be output to ~/.config/scopebuddy/scopebuddy.log\n")
            file.write("#SCB_DEBUG=1\n")
            file.write("###\n")
            file.write("## FOR ADVANCED USE INSIDE AN APPID CONFIG\n")
            file.write("###\n")
            file.write("# The config files are treated as a bash script by scopebuddy, this means you can use bash to do simple tasks before the game runs\n")
            file.write("# or you can check which mode scopebuddy is running in and apply settings accordingly, below are some handy variables for scripting.\n")
            file.write("# $SCB_NOSCOPE will be set to 1 if we are running in no gamescope mode\n")
            file.write("# $SCB_GAMEMODE will be set to 1 if we are running inside steam gamemode (which means SCB_NOSCOPE will also be set to 1 due to nested gamescope not working in gamemode)\n")
            file.write("# $command will contain everything steam expanded %command% into\n")
    except OSError as e:
        print(f"Error creating config file: {e}")

create_config_path(scbpath) # creates the config file if it does not exist


class MainWindow(QMainWindow,Mixins): 
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow() # imported from ui_mainwindow.py, generated by Qt Designer using mainwindow.ui
        self.ui.setupUi(self)
        self.setWindowTitle("ScopeBuddy GUI")  # Set the window title
        self.ui.variable_displayGamescope.setText(f'Current Gamescope Config: {self.read_gamescope_args()}') #display the current gamescope args

        # Button actions
        self.ui.pushButton_apply.clicked.connect(self.apply_clicked)
        self.ui.pushButton_exit.clicked.connect(self.exit_app)
        self.ui.pushButton_about.clicked.connect(self.open_about_dialog)

        # Input field validation 
        self.ui.lineEdit_oHeight.setValidator(QIntValidator()) # ensures valid inputs.
        self.ui.lineEdit_rHeight.setValidator(QIntValidator()) # input fields are also limited to 
        self.ui.lineEdit_oWidth.setValidator(QIntValidator())  # 4 digits in Qt Designer to ensure sane configs,
        self.ui.lineEdit_rWidth.setValidator(QIntValidator())  # unless a different value is more logical.
        self.ui.lineEdit_fps.setValidator(QIntValidator())
        self.ui.lineEdit_maxScaleFactor.setValidator(QIntValidator())
        self.ui.lineEdit_upscalerSharpness.setValidator(QIntValidator())

        gamescope_path = locate_dependency('gamescope') # check if gamescope is installed
        scopebuddy_path = locate_dependency('scopebuddy')
        if not (gamescope_path and scopebuddy_path):
            self.ui.variable_displayGamescope.setText("Gamescope or ScopeBuddy not found, no changes made will be saved.")
            self.ui.variable_displayGamescope.setStyleSheet("color: red;")

        self.apply_current_to_ui()

    # ON-CLICK METHODS

    def apply_clicked(self):
        print("Apply button clicked...")
        if not self.ensure_valid_args()[0]:
            dialog = Dialog_ApplyError()
            dialog.exec()
            raise ValueError
        dialog = DialogApply()
        dialog.exec()
        if dialog.answer:
            print('Applying changes...')
            self.apply_global_config()

    def exit_app(self):
        print("Exiting application...")
        sys.exit()

    def open_about_dialog(self):
        print("Opening about dialog...")
        dialog = DialogAbout()
        dialog.exec() #TODO: popup can go behind the main window, while blocking inputs on the main window...

class DialogAbout(QDialog):
    def __init__(self):
        super().__init__()
        self.ui = Ui_Dialog_About()
        self.ui.setupUi(self)
        self.setWindowTitle("About ScopeBuddy GUI")  
        self.ui.pushButton_okay.clicked.connect(self.close)

class Dialog_ApplyError(QDialog):
    def __init__(self):
        super().__init__()
        self.ui = Ui_Dialog_ApplyError()
        self.ui.setupUi(self)
        self.setWindowTitle("Error!")  
        self.ui.pushButton_Ok.clicked.connect(self.close)

class DialogApply(QDialog):
    def __init__(self):
        super().__init__()
        self.ui = Ui_Dialog_Apply()
        self.ui.setupUi(self)
        self.setWindowTitle("Apply Changes?") 
        self.ui.var_currentConfig.setText(MainWindow.read_gamescope_args(window))
        self.ui.var_newConfig.setText(MainWindow.generate_new_config(window))

        #button actions
        self.ui.pushButton_Cancel.clicked.connect(self.close)
        self.ui.pushButton_Apply.clicked.connect(self.apply_changes)
        self.answer = False #changes will not be applied unless explictly confirmed
        
        if not (locate_dependency('gamescope') and locate_dependency('scopebuddy')):
            print("Gamescope or ScopeBuddy not found, disabling file writing.")
            self.ui.pushButton_Apply.setEnabled(False)
            self.ui.label.setText("Gamescope or ScopeBuddy not found, unable to write to config file.")
            self.ui.label.setStyleSheet("color: red;")
            self.ui.label_4.setText('Ensure they are properly installed for this program to work.')
    
    def apply_changes(self):
        self.answer = True #changes have been explicitly confirmed
        self.close()





app = QApplication([]) # pass the arguments to the QApplication constructor
window = MainWindow()
window.show()
app.exec()

